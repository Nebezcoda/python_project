# Возможно, вы обратили внимание на то, что на предыдущем шаге мы, в одном из примеров, указали в декораторе два фильтра вместо одного.

@dp.message(F.text.lower().startswith('найди числа'), NumbersInMessage())
# ...

# И, конечно, было бы очень странно, если бы возможность комбинировать фильтры отсутствовала. Правда, чтобы не столкнуться с некоторым неожиданным поведением, нужно знать правила, по которым комбинируются фильтры. И сейчас мы разберем самые важные из них.
# Правило 1

# Если фильтры указать через запятую, то между ними будет проверяться условие "И", то есть, чтобы сработал хэндлер, с такими фильтрами - все фильтры должны вернуть True.

# Пример. Апдейт с типом контента фото от пользователя с ID = 173901673 пройдет такую цепочку фильтров, потому что оба фильтра вернут True.

@dp.message(F.photo, F.from_user.id == 173901673)    # True and True == True

# А такую цепочку тот же самый апдейт не пройдет, потому что апдейт не может одновременно быть одного и другого типа контента:

@dp.message(F.photo, F.voice)    # True and False == False

# То есть если в цепочке хотя бы один фильтр возвращает False - апдейт передан хэндлеру не будет. Будет передан только в том случае, если все фильтры вернут True.
# Правило 2

# Если нужно, чтобы фильтры работали по условию "ИЛИ", то есть хэндлер срабатывал бы тогда, когда хотя бы один фильтр из цепочки возвращал True - нужно декорировать хэндлер столько раз, сколько фильтров в цепочке.

# Пример. Нужно, чтобы хэндлер срабатывал, когда тип контента в апдейте видео или когда тип контента текст, который начинается со слова "привет" без учета регистра.

@dp.message(F.content_type == ContentType.VIDEO)
@dp.message(F.text.lower().startswith('привет'))

# True or False == True
# False or True == True
# False or False == False

# Правило 3

# Если нужно инвертировать результат работы фильтра - используется знак ~ перед фильтром.

# Пример. Хэндлер должен получать апдейты с типом контента текст, в которых текст НЕ начинается со слова "привет".

@dp.message(~F.text.startswith('привет'))

# Правило 4

# Магические фильтры можно комбинировать, используя операции побитового сравнения И/ИЛИ (& / |).

# Пример. Апдейт с типом контента текст или фото от пользователя с ID = 173901673. Тип контента текст или фото имеется в виду. Притом от пользователя с указанным ID.

@dp.message((F.text | F.photo) & F.from_user.id == 173901673)

# Правило 5

# В качестве способа объединения фильтров можно использовать функции and_f(), or_f(), invert_f(), импортируемые из aiogram.filters. В качестве аргументов в эти функции передаются фильтры через запятую. and_f() отвечает за логическое И, or_f() за логическое ИЛИ, а invert_f() за логическое НЕ.

# Пример. Хэндлер должен получить апдейт с типом контента текст, заканчивающийся на 'bot' от пользователя с ID = 173901673.

from aiogram.filters import and_f

# ...

@dp.message(and_f(F.text.endswith('bot'), F.from_user.id == 173901673))